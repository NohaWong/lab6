1. babble_server.c > main() > server_connection_init
2. babble_server.c > main() > while(1) loop - wait at server_connection_accept until there's a connection
3. new command > parse command > notify error / process & answer
4. accept login once at the beginning (if no error), other commands are handled in the inner while loop
5. list of clients with data (key, name, messages published, nb of followers...) , kind of database for looking up based on key
6. key is the hash of client name (id), used for looking up to identify which client is giving the command, getting client data
7. for streaming mode, no ack back for each command. Answers are set to cmd->answer
8. check if the the target exists. If not, ack with an error message. If existed, check if the follower has already followed the target. If not yet, add the target to the end of the followed list of the the follower client_data, update the number of followed clients. Also update the number of follower for the target. Making an ack if not in streaming mode.
9. each client data structure has a last_timeline attribute storing the lastime a TIMELINE request is executed. For each TIMELINE request, only get messages published after last_timeline, and at the end of the process, update last_timeline to endtime (the time when the TIMELINE request is processed).
10. network_recv() for reading data from the network; network_send() for writing data to the peer via the network. The return value for both cases is the total size of the payload, or -1 if there are errors.
